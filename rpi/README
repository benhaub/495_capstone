###############################################################################
#Authour : Ben Haubrich                                                       #
#File    : README                                                             #
#Synopsis: Developer documentation for the SCADA subsystem of the Boreas      #
#          Control Platform.                                                  #
###############################################################################

PROGRAM FLOW
  zone1.c is the entry point for the SCADA system.
  The first thing it does is configure the UART to 8Y1 at 9600 baud.
  Next a call to pthreads creates the threads that run to control recieve door
  commands and fan commands. The last thread is reponsible for sending the
  commands.

DESIGN
  The SCADA system uses threads so that it can send and query for changes in
  rules from the ICA at the same time. If it didn't use threads, then if
  communication failed it would be blocked while it waited for the
  communication to succeed, while a new command could potentially come in at
  the same time. The system would be blocked trying to wait for successful
  transmission of a command that is no longer valid.

FUNCTIONS
  poll_zone1
    This function loops through each of the rules stored in an enum from the
    highest integer rule to the lowest integer rule. The rules are organized
    by importance, the high the integer value of a rule, the more important it
    is. poll_zone always checks the highest valued rule first, if it finds it
    to be true, it will reset the count and check the rules again.
  zone1_sendcmd
    This function is responsible for sending the current command through the
    uart. It retreives the command from a global mailbox and keeps trying to
    send it until a 'z' is received from the endpoint of the communication.
    The z is an acknowledgement of correct, error free (no parity error)
  door_control
    The door_control function works similarly to poll_zone1. It checks an enum
    of door rules against the commands that are sent from the ICA. No door is
    more important than any other, and multiple doors can be opened at once so
    unlike it's fan control counterpart, it checks all the doors for rule
    changes.

FUTURE WORK
  The 'z' acknowledgement from the end point only acknowledges a transmission
  without parity error. Further iterations should introduce acknowledgement of
  door and fan actuation.

  A real time kernel should be used instead of pthreads to guarentee certain
  amounts of latency.

  More zones need to be implemented. The general flow would be the same as
  zone1, but check rules held in different modbus registers.

  The integer variable i has been witness to become larger than the integer
  variable rc after the program has been running for an extended duration of
  time. This causes it to check the dest array in indeces that are beyond it's
  memory allocation.
